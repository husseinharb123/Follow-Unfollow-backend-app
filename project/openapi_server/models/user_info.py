# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class UserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, email=None, password=None, first_name=None, last_name=None, account_type=None, gender=None, age=None):  # noqa: E501
        """UserInfo - a model defined in OpenAPI

        :param id: The id of this UserInfo.  # noqa: E501
        :type id: str
        :param email: The email of this UserInfo.  # noqa: E501
        :type email: str
        :param password: The password of this UserInfo.  # noqa: E501
        :type password: str
        :param first_name: The first_name of this UserInfo.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this UserInfo.  # noqa: E501
        :type last_name: str
        :param account_type: The account_type of this UserInfo.  # noqa: E501
        :type account_type: str
        :param gender: The gender of this UserInfo.  # noqa: E501
        :type gender: str
        :param age: The age of this UserInfo.  # noqa: E501
        :type age: int
        """
        self.openapi_types = {
            'id': str,
            'email': str,
            'password': str,
            'first_name': str,
            'last_name': str,
            'account_type': str,
            'gender': str,
            'age': int
        }

        self.attribute_map = {
            'id': '_id',
            'email': 'Email',
            'password': 'Password',
            'first_name': 'FirstName',
            'last_name': 'LastName',
            'account_type': 'AccountType',
            'gender': 'Gender',
            'age': 'Age'
        }

        self._id = id
        self._email = email
        self._password = password
        self._first_name = first_name
        self._last_name = last_name
        self._account_type = account_type
        self._gender = gender
        self._age = age

    @classmethod
    def from_dict(cls, dikt) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserInfo of this UserInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UserInfo.


        :return: The id of this UserInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserInfo.


        :param id: The id of this UserInfo.
        :type id: str
        """
        if id is not None and not re.search(r'^[a-fA-F0-9]{24}$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{24}$/`")  # noqa: E501

        self._id = id

    @property
    def email(self):
        """Gets the email of this UserInfo.

        email must have the following format something@someserver.something  # noqa: E501

        :return: The email of this UserInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.

        email must have the following format something@someserver.something  # noqa: E501

        :param email: The email of this UserInfo.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if email is not None and len(email) > 50:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `50`")  # noqa: E501
        if email is not None and not re.search(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', email):  # noqa: E501
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this UserInfo.

        Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character  # noqa: E501

        :return: The password of this UserInfo.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserInfo.

        Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character  # noqa: E501

        :param password: The password of this UserInfo.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if password is not None and not re.search(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$', password):  # noqa: E501
            raise ValueError("Invalid value for `password`, must be a follow pattern or equal to `/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/`")  # noqa: E501

        self._password = password

    @property
    def first_name(self):
        """Gets the first_name of this UserInfo.

        no special characters or numbers are allowed  # noqa: E501

        :return: The first_name of this UserInfo.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserInfo.

        no special characters or numbers are allowed  # noqa: E501

        :param first_name: The first_name of this UserInfo.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if first_name is not None and len(first_name) > 15:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `15`")  # noqa: E501
        if first_name is not None and len(first_name) < 3:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `3`")  # noqa: E501
        if first_name is not None and not re.search(r'^[a-zA-Z][a-zA-Z .,\'-]*$', first_name):  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z .,'-]*$/`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserInfo.

        no special characters or numbers are allowed  # noqa: E501

        :return: The last_name of this UserInfo.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserInfo.

        no special characters or numbers are allowed  # noqa: E501

        :param last_name: The last_name of this UserInfo.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501
        if last_name is not None and len(last_name) > 15:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `15`")  # noqa: E501
        if last_name is not None and len(last_name) < 3:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `3`")  # noqa: E501
        if last_name is not None and not re.search(r'^[a-zA-Z][a-zA-Z .,\'-]*$', last_name):  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z .,'-]*$/`")  # noqa: E501

        self._last_name = last_name

    @property
    def account_type(self):
        """Gets the account_type of this UserInfo.

        type of account  # noqa: E501

        :return: The account_type of this UserInfo.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this UserInfo.

        type of account  # noqa: E501

        :param account_type: The account_type of this UserInfo.
        :type account_type: str
        """
        allowed_values = ["private", "public"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def gender(self):
        """Gets the gender of this UserInfo.


        :return: The gender of this UserInfo.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserInfo.


        :param gender: The gender of this UserInfo.
        :type gender: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def age(self):
        """Gets the age of this UserInfo.


        :return: The age of this UserInfo.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this UserInfo.


        :param age: The age of this UserInfo.
        :type age: int
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")  # noqa: E501
        if age is not None and age < 18:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value greater than or equal to `18`")  # noqa: E501

        self._age = age
